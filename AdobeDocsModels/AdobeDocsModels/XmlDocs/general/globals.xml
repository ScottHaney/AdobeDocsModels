<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/home/parallels/Desktop/code/AdobeDocsModels/after-effects-scripting-guide-master/docs/general/globals.rst">
    <target refid="globals"></target>
    <section ids="global-functions globals" names="global\ functions globals">
        <title>Global functions</title>
        <paragraph>These globally available functions that are specific to After Effects. Any JavaScript object or function can call these functions, which allow you to display text in a small (3-line) area of the Info panel, to convert numeric time values to and from string values, or to generate a random number.</paragraph>
        <table>
            <tgroup cols="2">
                <colspec colwidth="26"></colspec>
                <colspec colwidth="51"></colspec>
                <thead>
                    <row>
                        <entry>
                            <paragraph>Global function</paragraph>
                        </entry>
                        <entry>
                            <paragraph>Description</paragraph>
                        </entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>
                            <paragraph><literal>clearOutput()</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph>Clears text from the Info panel.</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph><literal>currentFormatToTime()</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph>Converts string time value to a numeric time value.</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph><literal>generateRandomNumber()</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph>Generates a random number.</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph><literal>getEnumAsString()</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph>Converts an Enum value to it’s string name.</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph><literal>timeToCurrentFormat()</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph>Converts a numeric time value to a string time
                                value.</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph><literal>write()</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph>Writes text to the Info panel, with no line break
                                added.</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph><literal>writeLn()</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph>Writes text to the Info panel, adding a line break
                                at the end.</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph><literal>isValid()</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph>When true, the specified object exists.</paragraph>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <paragraph>Additional global functions for standard user I/O (<literal>alert</literal>, <literal>confirm</literal> , and <literal>prompt</literal>) and static functions for file I/O, are defined by ExtendScript; for detailed reference information, see the <reference name="JavaScript Tools Guide" refuri="https://extendscript.docsforadobe.dev/">JavaScript Tools Guide</reference><target ids="javascript-tools-guide" names="javascript\ tools\ guide" refuri="https://extendscript.docsforadobe.dev/"></target>.</paragraph>
        <transition></transition>
        <target refid="clearoutput"></target>
        <section ids="clearoutput id1" names="clearoutput() clearoutput">
            <title>clearOutput()</title>
            <paragraph><literal>clearOutput()</literal></paragraph>
            <paragraph><strong>Description</strong></paragraph>
            <paragraph>Clears the output in the Info panel.</paragraph>
            <paragraph><strong>Parameters</strong></paragraph>
            <paragraph>None.</paragraph>
            <paragraph><strong>Returns</strong></paragraph>
            <paragraph>Nothing.</paragraph>
            <transition></transition>
            <target refid="currentformattotime"></target>
        </section>
        <section ids="currentformattotime id2" names="currentformattotime() currentformattotime">
            <title>currentFormatToTime()</title>
            <paragraph><literal>currentFormatToTime(formattedTime, fps[, isDuration])</literal></paragraph>
            <paragraph><strong>Description</strong></paragraph>
            <paragraph>Converts a formatted string for a frame time value to a number of seconds, given a specified frame rate. For example, if the formatted frame time value is 0:00:12 (the exact string format is determined by a project setting), and the frame rate is 24 fps, the time would be 0.5 seconds (12/24). If the frame rate is 30 fps, the time would be 0.4 seconds (12/30). If the time is a duration, the frames are counted from 0. Otherwise, the frames are counted from the project’s starting frame (see <reference internal="True" refuri="project#project-displaystartframe"><inline classes="std std-ref">Project.displayStartFrame</inline></reference>).</paragraph>
            <paragraph><strong>Parameters</strong></paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="17"></colspec>
                    <colspec colwidth="60"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><literal>formattedTime</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph>The frame time value, a string specifying a number of
                                    frames in the project’s current time display format.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>fps</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph>The frames-per-second, a floating-point value.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>isDuration</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Optional. When true, the time is a duration (measured from
                                    frame 0). When false (the default), the time is measured
                                    from the project’s starting frame.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph><strong>Returns</strong></paragraph>
            <paragraph>Floating-point value, the number of seconds.</paragraph>
            <transition></transition>
            <target refid="generaterandomnumber"></target>
        </section>
        <section ids="generaterandomnumber id3" names="generaterandomnumber() generaterandomnumber">
            <title>generateRandomNumber()</title>
            <paragraph><literal>generateRandomNumber()</literal></paragraph>
            <note>
                <paragraph>This functionality was added in After Effects 13.6 (CC 2015)</paragraph>
            </note>
            <paragraph><strong>Description</strong></paragraph>
            <paragraph>Generates random numbers. This function is recommended instead of <literal>Math.random</literal> for generating random numbers that will be applied as values in a project (e.g., when using setValue).</paragraph>
            <paragraph>This method avoids a problem where <literal>Math.random</literal> would not return random values in After Effects CC 2015 (13.5.x) due to a concurrency issue with multiple CPU threads.</paragraph>
            <paragraph><strong>Returns</strong></paragraph>
            <paragraph>Floating-point, pseudo-random number in the range [0, 1].</paragraph>
            <paragraph><strong>Example</strong></paragraph>
            <literal_block classes="code javascript" force_highlighting="False" language="javascript" linenos="False" xml:space="preserve"><inline classes="comment single">// change the position X of all layers with random number
</inline>
<inline classes="keyword declaration">var</inline> <inline classes="name other">myComp</inline> <inline classes="operator">=</inline> <inline classes="name other">app</inline><inline classes="punctuation">.</inline><inline classes="name other">project</inline><inline classes="punctuation">.</inline><inline classes="name other">activeItem</inline><inline classes="punctuation">;</inline>
<inline classes="keyword declaration">var</inline> <inline classes="name other">x</inline> <inline classes="operator">=</inline> <inline classes="literal number integer">0</inline><inline classes="punctuation">;</inline>

<inline classes="keyword">for</inline> <inline classes="punctuation">(</inline><inline classes="keyword declaration">var</inline> <inline classes="name other">i</inline> <inline classes="operator">=</inline> <inline classes="literal number integer">1</inline><inline classes="punctuation">;</inline> <inline classes="name other">i</inline> <inline classes="operator">&lt;=</inline> <inline classes="name other">myComp</inline><inline classes="punctuation">.</inline><inline classes="name other">numLayers</inline><inline classes="punctuation">;</inline> <inline classes="name other">i</inline><inline classes="operator">++</inline><inline classes="punctuation">)</inline> <inline classes="punctuation">{</inline>
  <inline classes="comment single">// If you use Math.random(), this does not work
</inline>  <inline classes="comment single">// x = 400 * (Math.random()) – 200;
</inline>  <inline classes="comment single">// use new generateRandomNumber() instead
</inline>
  <inline classes="name other">x</inline> <inline classes="operator">=</inline> <inline classes="literal number integer">400</inline> <inline classes="operator">*</inline> <inline classes="name other">generateRandomNumber</inline><inline classes="punctuation">()</inline> <inline classes="operator">-</inline> <inline classes="literal number integer">200</inline><inline classes="punctuation">;</inline>
  <inline classes="keyword declaration">var</inline> <inline classes="name other">currentPos</inline> <inline classes="operator">=</inline> <inline classes="name other">myComp</inline><inline classes="punctuation">.</inline><inline classes="name other">layer</inline><inline classes="punctuation">(</inline><inline classes="name other">i</inline><inline classes="punctuation">).</inline><inline classes="name other">property</inline><inline classes="punctuation">(</inline><inline classes="literal string double">"Position"</inline><inline classes="punctuation">).</inline><inline classes="name other">value</inline><inline classes="punctuation">;</inline>
  <inline classes="name other">myComp</inline><inline classes="punctuation">.</inline><inline classes="name other">layer</inline><inline classes="punctuation">(</inline><inline classes="name other">i</inline><inline classes="punctuation">).</inline><inline classes="name other">property</inline><inline classes="punctuation">(</inline><inline classes="literal string double">"Position"</inline><inline classes="punctuation">).</inline><inline classes="name other">setValue</inline><inline classes="punctuation">([</inline><inline classes="name other">currentPos</inline><inline classes="punctuation">[</inline><inline classes="literal number integer">0</inline><inline classes="punctuation">]</inline> <inline classes="operator">+</inline> <inline classes="name other">x</inline><inline classes="punctuation">,</inline> <inline classes="name other">currentPos</inline><inline classes="punctuation">[</inline><inline classes="literal number integer">1</inline><inline classes="punctuation">]]);</inline>
<inline classes="punctuation">}</inline></literal_block>
            <transition></transition>
            <target refid="getenumasstring"></target>
        </section>
        <section ids="getenumasstring id4" names="getenumasstring() getenumasstring">
            <title>getEnumAsString()</title>
            <paragraph><literal>getEnumAsString()</literal></paragraph>
            <note>
                <paragraph>This functionality was added in After Effects 24.0.</paragraph>
            </note>
            <paragraph><strong>Description</strong></paragraph>
            <paragraph>Returns the string value of an Enum.</paragraph>
            <paragraph><strong>Parameters</strong></paragraph>
            <paragraph>Enum.</paragraph>
            <paragraph><strong>Returns</strong></paragraph>
            <paragraph>String.</paragraph>
            <paragraph><strong>Example</strong></paragraph>
            <literal_block classes="code javascript" force_highlighting="False" language="javascript" linenos="False" xml:space="preserve"><inline classes="comment single">// Returns: "BlendingMode.ADD"
</inline><inline classes="name other">alert</inline><inline classes="punctuation">(</inline><inline classes="name other">getEnumAsString</inline><inline classes="punctuation">(</inline><inline classes="literal number integer">5220</inline><inline classes="punctuation">));</inline></literal_block>
            <transition></transition>
            <target refid="isvalid"></target>
        </section>
        <section ids="isvalid id5" names="isvalid() isvalid">
            <title>isValid()</title>
            <paragraph><literal>isValid(obj)</literal></paragraph>
            <paragraph><strong>Description</strong></paragraph>
            <paragraph>Determines if the specified After Effects object (e.g., composition, layer, mask, etc.) still exists. Some operations, such as <reference internal="True" refuri="../properties/propertybase#propertybase-moveto"><inline classes="std std-ref">PropertyBase.moveTo()</inline></reference>, might invalidate existing variable assignments to related objects. This function allows you to test whether those assignments are still valid before attempting to access them.</paragraph>
            <paragraph><strong>Parameters</strong></paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="7"></colspec>
                    <colspec colwidth="47"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><literal>obj</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph>The After Effects object to check for validity.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph><strong>Returns</strong></paragraph>
            <paragraph>Boolean.</paragraph>
            <paragraph><strong>Example</strong></paragraph>
            <literal_block classes="code javascript" force_highlighting="False" language="javascript" linenos="False" xml:space="preserve"><inline classes="keyword declaration">var</inline> <inline classes="name other">layer</inline> <inline classes="operator">=</inline> <inline classes="name other">app</inline><inline classes="punctuation">.</inline><inline classes="name other">project</inline><inline classes="punctuation">.</inline><inline classes="name other">activeItem</inline><inline classes="punctuation">.</inline><inline classes="name other">layer</inline><inline classes="punctuation">(</inline><inline classes="literal number integer">1</inline><inline classes="punctuation">);</inline> <inline classes="comment single">// assume layer has three masks
</inline><inline classes="name other">alert</inline><inline classes="punctuation">(</inline><inline classes="name other">isValid</inline><inline classes="punctuation">(</inline><inline classes="name other">layer</inline><inline classes="punctuation">));</inline> <inline classes="comment single">// displays "true"
</inline><inline classes="keyword declaration">var</inline> <inline classes="name other">mask1</inline> <inline classes="operator">=</inline> <inline classes="name other">layer</inline><inline classes="punctuation">.</inline><inline classes="name other">mask</inline><inline classes="punctuation">(</inline><inline classes="literal number integer">1</inline><inline classes="punctuation">);</inline>
<inline classes="keyword declaration">var</inline> <inline classes="name other">mask2</inline> <inline classes="operator">=</inline> <inline classes="name other">layer</inline><inline classes="punctuation">.</inline><inline classes="name other">mask</inline><inline classes="punctuation">(</inline><inline classes="literal number integer">2</inline><inline classes="punctuation">);</inline>
<inline classes="keyword declaration">var</inline> <inline classes="name other">mask3</inline> <inline classes="operator">=</inline> <inline classes="name other">layer</inline><inline classes="punctuation">.</inline><inline classes="name other">mask</inline><inline classes="punctuation">(</inline><inline classes="literal number integer">3</inline><inline classes="punctuation">);</inline>
<inline classes="name other">mask3</inline><inline classes="punctuation">.</inline><inline classes="name other">moveTo</inline><inline classes="punctuation">(</inline><inline classes="literal number integer">1</inline><inline classes="punctuation">);</inline> <inline classes="comment single">// move the third mask to the top of the mask stack
</inline><inline classes="name other">alert</inline><inline classes="punctuation">(</inline><inline classes="name other">isValid</inline><inline classes="punctuation">(</inline><inline classes="name other">mask1</inline><inline classes="punctuation">));</inline> <inline classes="comment single">// displays "false"; mask2 and mask3 do as well</inline></literal_block>
            <transition></transition>
            <target refid="timetocurrentformat"></target>
        </section>
        <section ids="timetocurrentformat id6" names="timetocurrentformat() timetocurrentformat">
            <title>timeToCurrentFormat()</title>
            <paragraph><literal>timeToCurrentFormat(time, fps[, isDuration])</literal></paragraph>
            <paragraph><strong>Description</strong></paragraph>
            <paragraph>Converts a numeric time value (a number of seconds) to a frame time value; that is, a formatted string thatshows which frame corresponds to that time, at the specified rate. For example, if the time is 0.5 seconds, andthe frame rate is 24 fps, the frame would be 0:00:12 (when the project is set to display as timecode). If the framerate is 30 fps, the frame would be 0:00:15. The format of the timecode string is determined by a project setting. If the time is a duration, the frames are counted from 0. Otherwise, the frames are counted from the project’s starting frame (see <reference internal="True" refuri="project#project-displaystartframe"><inline classes="std std-ref">Project displayStartFrame</inline></reference> attribute).</paragraph>
            <paragraph><strong>Parameters</strong></paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="14"></colspec>
                    <colspec colwidth="63"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><literal>time</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph>The number of seconds, a floating-point value.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>fps</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph>The frames-per-second, a floating-point value.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>isDuration</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Optional. When true, the time is a duration (measured from
                                    frame 0). When false (the default), the time is measured from
                                    the project’s starting frame.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph><strong>Returns</strong></paragraph>
            <paragraph>String in the project’s current time display format.</paragraph>
            <transition></transition>
            <target refid="write"></target>
        </section>
        <section ids="write id7" names="write() write">
            <title>write()</title>
            <paragraph><literal>write(text)</literal></paragraph>
            <paragraph><strong>Description</strong></paragraph>
            <paragraph>Writes output to the Info panel, with no line break added.</paragraph>
            <paragraph><strong>Parameters</strong></paragraph>
            <paragraph><literal>text</literal> The string to display. Truncated if too long for the Info panel.</paragraph>
            <paragraph><strong>Returns</strong></paragraph>
            <paragraph>Nothing.</paragraph>
            <paragraph><strong>Example</strong></paragraph>
            <literal_block classes="code javascript" force_highlighting="False" language="javascript" linenos="False" xml:space="preserve"><inline classes="name other">write</inline><inline classes="punctuation">(</inline><inline classes="literal string double">"This text appears in Info panel "</inline><inline classes="punctuation">);</inline>
<inline classes="name other">write</inline><inline classes="punctuation">(</inline><inline classes="literal string double">"with more on same line."</inline><inline classes="punctuation">);</inline></literal_block>
            <transition></transition>
            <target refid="writeln"></target>
        </section>
        <section ids="writeln id8" names="writeln() writeln">
            <title>writeLn()</title>
            <paragraph><literal>writeLn(text)</literal></paragraph>
            <paragraph><strong>Description</strong></paragraph>
            <paragraph>Writes output to the Info panel and adds a line break at the end.</paragraph>
            <paragraph><strong>Parameters</strong></paragraph>
            <paragraph><literal>text</literal> The string to display.</paragraph>
            <paragraph><strong>Returns</strong></paragraph>
            <paragraph>Nothing.</paragraph>
            <paragraph><strong>Example</strong></paragraph>
            <literal_block classes="code javascript" force_highlighting="False" language="javascript" linenos="False" xml:space="preserve"><inline classes="name other">writeLn</inline><inline classes="punctuation">(</inline><inline classes="literal string double">"This text appears on first line"</inline><inline classes="punctuation">);</inline>
<inline classes="name other">writeLn</inline><inline classes="punctuation">(</inline><inline classes="literal string double">"This text appears on second line"</inline><inline classes="punctuation">);</inline></literal_block>
        </section>
    </section>
</document>
