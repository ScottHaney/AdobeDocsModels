<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/home/parallels/Desktop/code/AdobeDocsModels/after-effects-scripting-guide-master/docs/other/characterrange.rst">
    <target refid="characterrange"></target>
    <section ids="characterrange-object characterrange" names="characterrange\ object characterrange">
        <title>CharacterRange object</title>
        <line_block>
            <line><literal>app.project.item(index).layer(index).text.sourceText.value.characterRange(characterIndexStart, [signedCharacterIndexEnd])</literal></line>
        </line_block>
        <note>
            <paragraph>This functionality was added in After Effects (Beta) 24.2 and is subject to change while it remains in Beta.</paragraph>
        </note>
        <paragraph><strong>Description</strong></paragraph>
        <paragraph>The CharacterRange object is an accessor to a character range of the <reference internal="True" refuri="textdocument#textdocument"><inline classes="std std-ref">TextDocument object</inline></reference> instance it was created from.</paragraph>
        <paragraph>Unlike the <reference internal="True" refuri="textdocument#textdocument"><inline classes="std std-ref">TextDocument object</inline></reference>, which looks at only the first character when returning character attributes, here the character range can span zero or more characters. As a consequence, two or more characters <emphasis>may not have the same attribute value</emphasis> and this mixed state will be signaled by returning <literal>undefined</literal>.</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph>The property <literal>characterStart</literal> is the first character index of the range.</paragraph>
            </list_item>
            <list_item>
                <paragraph>The property <literal>characterEnd</literal> will report the (last + 1) character index of the range, such that (<literal>characterEnd</literal> - <literal>characterStart</literal>) represents the number of characters in the range.</paragraph>
            </list_item>
        </bullet_list>
        <paragraph>It is acceptable for most properties for the effective range to be zero - otherwise known as an insertion point.</paragraph>
        <paragraph>When accessed, the CharacterRange object will check that <literal>characterStart</literal> and effective <literal>characterEnd</literal> of the range remains valid for the current span of the related <reference internal="True" refuri="textdocument#textdocument"><inline classes="std std-ref">TextDocument object</inline></reference>. This is the same rule as applied when the CharacterRange was created, but because the length of the related <reference internal="True" refuri="textdocument#textdocument"><inline classes="std std-ref">TextDocument object</inline></reference> can change through the addition or removal of characters, the <literal>characterStart</literal> and effective <literal>characterEnd</literal> may no longer be valid. In this situation an exception will be thrown on access, either read or write. The property <literal>isRangeValid</literal> will return false if the effective range is no longer valid.</paragraph>
        <paragraph>Note that if the <reference internal="True" refuri="textdocument#textdocument"><inline classes="std std-ref">TextDocument object</inline></reference> length changes, the <reference internal="True" refid="characterrange"><inline classes="std std-ref">CharacterRange object</inline></reference> range could become valid again.</paragraph>
        <paragraph><strong>Differences from TextDocument</strong></paragraph>
        <paragraph>Because CharacterRange is an accessor of <reference internal="True" refuri="textdocument#textdocument"><inline classes="std std-ref">TextDocument object</inline></reference>, most methods and attributes of TextDocument are available when working with CharacterRange. The attributes and methods that are unique to CharacterRange or exhibit unique behaviors are included on this page.</paragraph>
        <paragraph>The following attributes and methods are <strong>not</strong> available on instances of CharacterRange:</paragraph>
        <block_quote>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="35"></colspec>
                    <colspec colwidth="29"></colspec>
                    <thead>
                        <row>
                            <entry>
                                <paragraph>Attributes</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Methods</paragraph>
                            </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><title_reference>baselineLocs</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><title_reference>characterRange</title_reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>boxText</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><title_reference>paragraphCharacterIndexesAt</title_reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>boxTextPos</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><title_reference>paragraphRange</title_reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>boxTextSize</title_reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>lineOrientation</title_reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>paragraphCount</title_reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>pointText</title_reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </block_quote>
        <paragraph><strong>Examples</strong></paragraph>
        <paragraph>This increases the font size of the first character in the TextDocument, and set the rest of the characters to fontSize 40.</paragraph>
        <literal_block classes="code javascript" force_highlighting="False" language="javascript" linenos="False" xml:space="preserve"><inline classes="keyword declaration">var</inline> <inline classes="name other">textDocument</inline> <inline classes="operator">=</inline> <inline classes="name other">app</inline><inline classes="punctuation">.</inline><inline classes="name other">project</inline><inline classes="punctuation">.</inline><inline classes="name other">item</inline><inline classes="punctuation">(</inline><inline classes="name other">index</inline><inline classes="punctuation">).</inline><inline classes="name other">layer</inline><inline classes="punctuation">(</inline><inline classes="name other">index</inline><inline classes="punctuation">).</inline><inline classes="name other">property</inline><inline classes="punctuation">(</inline><inline classes="literal string double">"Source Text"</inline><inline classes="punctuation">).</inline><inline classes="name other">value</inline><inline classes="punctuation">;</inline>
<inline classes="keyword declaration">var</inline> <inline classes="name other">characterRange</inline> <inline classes="operator">=</inline> <inline classes="name other">textDocument</inline><inline classes="punctuation">.</inline><inline classes="name other">characterRange</inline><inline classes="punctuation">(</inline><inline classes="literal number integer">0</inline><inline classes="punctuation">,</inline><inline classes="literal number integer">1</inline><inline classes="punctuation">);</inline>

<inline classes="name other">characterRange</inline><inline classes="punctuation">.</inline><inline classes="name other">fontSize</inline> <inline classes="operator">=</inline> <inline classes="name other">characterRange</inline><inline classes="punctuation">.</inline><inline classes="name other">fontSize</inline> <inline classes="operator">+</inline> <inline classes="literal number integer">5</inline><inline classes="punctuation">;</inline>
<inline classes="name other">textDocument</inline><inline classes="punctuation">.</inline><inline classes="name other">characterRange</inline><inline classes="punctuation">(</inline><inline classes="literal number integer">1</inline><inline classes="punctuation">,</inline><inline classes="operator">-</inline><inline classes="literal number integer">1</inline><inline classes="punctuation">).</inline><inline classes="name other">fontSize</inline> <inline classes="operator">=</inline> <inline classes="literal number integer">40</inline><inline classes="punctuation">;</inline></literal_block>
        <transition></transition>
        <section ids="attributes" names="attributes">
            <title>Attributes</title>
            <target refid="characterrange-characterend"></target>
            <section dupnames="characterrange.characterend" ids="characterrange-characterend id1" names="characterrange.characterend">
                <title>CharacterRange.characterEnd</title>
                <paragraph><literal>CharacterRange.characterEnd</literal></paragraph>
                <paragraph><strong>Description</strong></paragraph>
                <paragraph>The Text layer range calculated character end value.</paragraph>
                <paragraph>Throws an exception on access if the effective value would exceed the bounds of the related <reference internal="True" refuri="textdocument#textdocument"><inline classes="std std-ref">TextDocument object</inline></reference>.</paragraph>
                <paragraph><strong>Type</strong></paragraph>
                <paragraph>Unsigned integer; read-only.</paragraph>
                <transition></transition>
                <target refid="characterrange-characterstart"></target>
            </section>
            <section dupnames="characterrange.characterstart" ids="characterrange-characterstart id2" names="characterrange.characterstart">
                <title>CharacterRange.characterStart</title>
                <paragraph><literal>CharacterRange.characterStart</literal></paragraph>
                <paragraph><strong>Description</strong></paragraph>
                <paragraph>The Text layer range calculated character start value.</paragraph>
                <paragraph>Throws an exception on access if the effective value would exceed the bounds of the related <reference internal="True" refuri="textdocument#textdocument"><inline classes="std std-ref">TextDocument object</inline></reference>.</paragraph>
                <paragraph><strong>Type</strong></paragraph>
                <paragraph>Unsigned integer; read-only.</paragraph>
                <transition></transition>
                <target refid="characterrange-fillcolor"></target>
            </section>
            <section dupnames="characterrange.fillcolor" ids="characterrange-fillcolor id3" names="characterrange.fillcolor">
                <title>CharacterRange.fillColor</title>
                <paragraph><literal>CharacterRange.fillColor</literal></paragraph>
                <paragraph><strong>Description</strong></paragraph>
                <paragraph>The Text layer range CharacterRange attribute Fill Color, as an array of <literal>[r, g, b]</literal> floating-point values.</paragraph>
                <paragraph>For example, in an 8-bpc project, a red value of 255 would be 1.0, and in a 32-bpc project, an overbright blue value can be something like 3.2.</paragraph>
                <paragraph>Setting this value will also set <literal>applyFill</literal> to true across the affected characters.</paragraph>
                <paragraph>If this attribute has a mixed value for the range of characters, it will be read as <literal>undefined</literal>.</paragraph>
                <warning>
                    <paragraph>In contrast to the same attribute on the TextDocument API, we will <emphasis>not</emphasis> throw an exception on read if <literal>applyFill</literal> is not true.</paragraph>
                </warning>
                <paragraph><strong>Type</strong></paragraph>
                <paragraph>Array <literal>[r, g, b]</literal> of floating-point values; read/write.</paragraph>
                <transition></transition>
                <target refid="characterrange-israngevalid"></target>
            </section>
            <section dupnames="characterrange.israngevalid" ids="characterrange-israngevalid id4" names="characterrange.israngevalid">
                <title>CharacterRange.isRangeValid</title>
                <paragraph><literal>CharacterRange.isRangeValid</literal></paragraph>
                <paragraph><strong>Description</strong></paragraph>
                <paragraph>Returns true if the current range is within the bounds of the related <reference internal="True" refuri="textdocument#textdocument"><inline classes="std std-ref">TextDocument object</inline></reference>, false otherwise.</paragraph>
                <paragraph><strong>Type</strong></paragraph>
                <paragraph>Boolean; read-only.</paragraph>
                <transition></transition>
                <target refid="characterrange-kerning"></target>
            </section>
            <section dupnames="characterrange.kerning" ids="characterrange-kerning id5" names="characterrange.kerning">
                <title>CharacterRange.kerning</title>
                <paragraph><literal>CharacterRange.kerning</literal></paragraph>
                <paragraph><strong>Description</strong></paragraph>
                <paragraph>The Text layer range character attribute kerning option.</paragraph>
                <paragraph>This effectively reports the manual kerning value, and not the calculated kerning value from auto kerning.</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>If <literal>autoKernType</literal> in the range is set to <literal>AutoKernType.METRIC_KERN</literal>, <literal>AutoKernType.OPTICAL_KERN</literal>, or is mixed, then this property will be returned as <literal>undefined</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>If <literal>autoKernType</literal> in the range is set to <literal>AutoKernType.NO_AUTO_KERN</literal>, and this attribute has a mixed value, it will be read as <literal>undefined</literal>.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Setting this value will also set <literal>AutoKernType.NO_AUTO_KERN</literal> to true across the affected characters.</paragraph>
                <paragraph><strong>Type</strong></paragraph>
                <paragraph>Integer value; read/write.</paragraph>
                <transition></transition>
                <target refid="characterrange-strokecolor"></target>
            </section>
            <section dupnames="characterrange.strokecolor" ids="characterrange-strokecolor id6" names="characterrange.strokecolor">
                <title>CharacterRange.strokeColor</title>
                <paragraph><literal>CharacterRange.strokeColor</literal></paragraph>
                <paragraph><strong>Description</strong></paragraph>
                <paragraph>The Text layer CharacterRange stroke color character property, as an array of [r, g, b] floating-point values.</paragraph>
                <paragraph>For example, in an 8-bpc project, a red value of 255 would be 1.0, and in a 32-bpc project, an overbright blue value can be something like 3.2.</paragraph>
                <paragraph>If this attribute has a mixed value, it will be read as <literal>undefined</literal>.</paragraph>
                <paragraph>Setting this value will also set <literal>applyStroke</literal> to true across the affected characters.</paragraph>
                <warning>
                    <paragraph>In contrast to the same attribute on the TextDocument API, we will <emphasis>not</emphasis> throw an exception on read if <literal>applyStroke</literal> is not true.</paragraph>
                </warning>
                <paragraph><strong>Type</strong></paragraph>
                <paragraph>Array [r, g, b] of floating-point values; read/write.</paragraph>
                <transition></transition>
                <target refid="characterrange-strokeoverfill"></target>
            </section>
            <section dupnames="characterrange.strokeoverfill" ids="characterrange-strokeoverfill id7" names="characterrange.strokeoverfill">
                <title>CharacterRange.strokeOverFill</title>
                <paragraph><literal>CharacterRange.strokeOverFill</literal></paragraph>
                <paragraph><strong>Description</strong></paragraph>
                <paragraph>The Text layer CharacterRange Stroke Over Fill character property.</paragraph>
                <paragraph>Indicates the rendering order for the fill and stroke for characters in the range. When true, the stroke appears over the fill.</paragraph>
                <paragraph>If this attribute has a mixed value, it will be read as <literal>undefined</literal>.</paragraph>
                <warning>
                    <line_block>
                        <line>The Text layer can override per-character attribute setting via the All Strokes First or All Fills First setting on the CharPanel.</line>
                        <line>The value returned here represents what is applied to the characters, without regard to the possible Text layer override.</line>
                    </line_block>
                </warning>
                <paragraph><strong>Type</strong></paragraph>
                <paragraph>Boolean; read/write.</paragraph>
                <transition></transition>
                <target refid="characterrange-text"></target>
            </section>
            <section dupnames="characterrange.text" ids="characterrange-text id8" names="characterrange.text">
                <title>CharacterRange.text</title>
                <paragraph><literal>CharacterRange.text</literal></paragraph>
                <paragraph><strong>Description</strong></paragraph>
                <paragraph>The text value for the Text layer range.</paragraph>
                <paragraph>On read, the same number of characters as the span of the range will be returned. If the span is zero (an insertion point) it return an empty string.</paragraph>
                <paragraph>On write, the characters in the range will be replaced with whatever string value is supplied. If an empty string, then the characters in the range will be effectively deleted.</paragraph>
                <paragraph>To insert characters without deleting any existing, call <reference internal="True" refuri="textdocument#textdocument-characterrange"><inline classes="std std-ref">TextDocument.characterRange()</inline></reference> with the same value for start as end to get an insertion point range.</paragraph>
                <paragraph><strong>Type</strong></paragraph>
                <paragraph>String; read/write.</paragraph>
            </section>
        </section>
        <transition></transition>
        <section ids="methods" names="methods">
            <title>Methods</title>
            <target refid="characterrange-tostring"></target>
            <section ids="characterrange-tostring id9" names="characterrange.tostring() characterrange.tostring">
                <title>CharacterRange.toString()</title>
                <paragraph><literal>CharacterRange.toString()</literal></paragraph>
                <paragraph><strong>Description</strong></paragraph>
                <paragraph>Returns a string with the parameters used to create the <title_reference>CharacterRange</title_reference> instance, e.g. <literal>"CharacterRange(0,-1)"</literal>.</paragraph>
                <paragraph>This may be safely called on an instance where <title_reference>isRangeValid</title_reference> returns false.</paragraph>
                <paragraph><strong>Parameters</strong></paragraph>
                <paragraph>None.</paragraph>
                <paragraph><strong>Returns</strong></paragraph>
                <paragraph>String;</paragraph>
            </section>
        </section>
    </section>
</document>
